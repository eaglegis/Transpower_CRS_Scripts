# ---------------------------------------------------------------------------
# copy_supply.py
# Created on: 2012-03-23 16:13:30.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------
##KC original script edited by chadwickk -- all edits indicated by ##KC
##KC uses staging version of CADASTRE in case pre-prod copy hasn't been performed yet

# Import arcpy module
import arcpy, sys, string, os, datetime


starttime = datetime.datetime.now()
arcpy.env.overwriteOutput = True

# script name
script_name = os.path.basename(__file__)

# variables
fcsToCopy = ['MX_Sites', 'MX_Structures','MX_Spans']
fcsToIntersect = ['MX_Structures', 'MX_Sites', 'MX_Section', 'MX_Spans' ]
outFcs = ['STRUCTURE_Parcel', 'SITE_Parcel', 'Section_Parcel','SPAN_Parcel']
dataTypes = ['POINT', 'POINT', 'LINE', 'LINE']

args = []
err_message = None
log_messages = []

def log_msg(msg):
    print (msg)
    log_messages.append(msg)

def delete_layer(lyr):
    if arcpy.Exists(lyr):
        print ("{} exists - deleted".format(lyr))
        arcpy.Delete_management(lyr)

def crs8_extract_for_connection(args):
    wkgFolder = args[0]
    assetsGDBname = args[1]
    spreportSdePath = args[2]
    spreportDataSDEprefix = args[3]   
    stgSdePath = args[4]
    stgDataSDEprefix = args[5]    
   
    # Set locations, etc
    assetsGDBpath = os.path.join(wkgFolder,assetsGDBname)

    # log function
    log_msg ('calling {}'.format(script_name))

    err_message = None

    
    try:

        ### Create assets GDB - check for existence first    
        log_msg ('Creating working assets GDB...')
        if arcpy.Exists(assetsGDBpath):
            log_msg ('WARNING: {} already exists! - deleted'.format(assetsGDBpath))
            arcpy.Delete_management(assetsGDBpath)
        arcpy.CreateFileGDB_management(wkgFolder,assetsGDBname)

        arcpy.env.workspace = assetsGDBpath
        # Set the configKeyword environment to SDELOB.

        #Process: Copy Features
        log_msg ('Copy Features from SPREPORT database to assets gdb ...')
        for fc in fcsToCopy:
            inFCname = spreportDataSDEprefix + fc
            inFCpath = os.path.join(spreportSdePath,inFCname)
            outFCpath = os.path.join(assetsGDBpath,fc)
            log_msg ('Copying: {}'.format(inFCpath))
            if arcpy.Exists(inFCpath):
                arcpy.Copy_management(inFCpath,outFCpath, "FeatureClass")
       
        sectionClause = '"status" <> ' + "'FUTURE'" ##KC replaced previous line with this and three following
        fc_name = spreportDataSDEprefix + "MX_SECTION"
        in_fc = os.path.join(spreportSdePath,fc_name)
        out_fc= os.path.join(assetsGDBpath,fc_name)
        delete_layer("sectionLyr")
        arcpy.MakeFeatureLayer_management(in_fc,"sectionLyr",sectionClause)
        log_msg ('Copying: {}'.format(in_fc))
        arcpy.CopyFeatures_management("sectionLyr",out_fc)
      
        log_msg ('Copying staging cadstre ...')
        fc_name = stgDataSDEprefix +"CADASTRE"
        in_fc = os.path.join(stgSdePath,fc_name)
        out_fc = os.path.join(assetsGDBpath,fc_name)
        arcpy.Copy_management(in_fc,out_fc,"FeatureClass") 

        
        # Process: Intersect
        arcpy.env.workspace = assetsGDBpath
        log_msg ('Intersecting ...')        
        idx = 0
        for fc in fcsToIntersect:
            in_fcs = [fc, 'CADASTRE']    
            out_fc = outFcs[idx]
            data_type = dataTypes[idx]
            log_msg ('Intersecting: {}'.format(in_fcs))
            arcpy.Intersect_analysis(in_fcs,out_fc,"ALL","#",data_type)
            
            idx = idx +1

        #for each in list count and output
        log_msg ('checking feature count ...')
        fcl = arcpy.ListFeatureClasses()
        for idata in fcl:
            #count records
            fc_count = arcpy.GetCount_management(idata).getOutput(0)
            log_msg ( '{0} - {1} Records'.format(idata,fc_count))
        
        log_msg ( "Process time: %s \n" % str(datetime.datetime.now()-starttime))

    except Exception as e: 
        err_message =  "ERROR while running {0}: {1}" .format(script_name,e)
    
    return err_message, log_messages
       